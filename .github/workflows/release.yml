name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.1)'
        required: true
        type: string

jobs:
  build-release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Setup Apple certificate (macOS)
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Skip if certificate is not set
          if [ -z "$APPLE_CERTIFICATE" ]; then
            echo "⚠️  No Apple certificate found. App will not be signed."
            exit 0
          fi
          
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          echo -n "$APPLE_CERTIFICATE" | base64 --decode -o $CERTIFICATE_PATH
          
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          security import $CERTIFICATE_PATH -P "$APPLE_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          echo "✅ Certificate imported successfully"

      - name: Install WebView2 (Windows)
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri 'https://go.microsoft.com/fwlink/p/?LinkId=2124703' -OutFile 'MicrosoftEdgeWebview2Setup.exe'
          Start-Process -FilePath 'MicrosoftEdgeWebview2Setup.exe' -ArgumentList '/silent /install' -Wait

      - name: Install frontend dependencies
        run: npm install

      - name: Build and release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ inputs.version || github.ref_name }}
          releaseName: "FGBrowser ${{ inputs.version || github.ref_name }}"
          releaseBody: |
            ## FGBrowser ${{ inputs.version || github.ref_name }}

            ### Installation

            **macOS (Recommended - No Security Warnings!):**
            ```bash
            brew tap nodtox/fgbrowser
            brew install --cask fgbrowser
            ```

            **Direct Downloads:**
            - macOS Apple Silicon (M1/M2/M3/M4): `*_aarch64.dmg`
            - macOS Intel: `*_x86_64.dmg`
            - Windows: `*_x64-setup.exe`

            ### macOS Direct Download Instructions

            If you download the DMG directly and see **"FGBrowser is damaged and can't be opened"**, run:
            ```bash
            xattr -cr /Applications/FGBrowser.app
            ```
            This removes the quarantine flag. One-time step.

            **Alternatively:** Right-click app → Open → Open (in dialog)
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}

      - name: Calculate SHA256 for Homebrew (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "📦 SHA256 hashes for Homebrew Cask:"
          echo "======================================"
          if [ -f src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg ]; then
            echo "ARM64 (aarch64):"
            shasum -a 256 src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg | tee -a $GITHUB_STEP_SUMMARY
          fi
          if [ -f src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/*.dmg ]; then
            echo "Intel (x86_64):"
            shasum -a 256 src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/*.dmg | tee -a $GITHUB_STEP_SUMMARY
          fi
          echo "======================================"
          echo "Copy these hashes to your Homebrew Cask file"

      - name: Cleanup keychain (macOS)
        if: always() && matrix.platform == 'macos-latest'
        run: |
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security delete-keychain $KEYCHAIN_PATH 2>/dev/null || true

